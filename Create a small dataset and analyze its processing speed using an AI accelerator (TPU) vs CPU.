import tensorflow as tf
import time
import numpy as np

# Create dataset and model
X, y = np.random.random((1000, 10)).astype(np.float32), np.random.randint(0, 2, (1000, 1)).astype(np.float32)
def create_model(input_shape): 
    return tf.keras.Sequential([
        tf.keras.layers.Dense(64, activation='relu', input_shape=input_shape),
        tf.keras.layers.Dense(1, activation='sigmoid')
    ])

# Train function
def train_model(strategy, X, y):
    with strategy.scope():
        model = create_model((X.shape[1],))
        start = time.time()
        model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
        model.fit(X, y, epochs=5, batch_size=32, verbose=0)
        return time.time() - start

# Train on CPU
cpu_time = train_model(tf.distribute.OneDeviceStrategy('/CPU:0'), X, y)
print(f"Training time on CPU: {cpu_time:.2f} seconds")

# Train on TPU if available
try:
    resolver = tf.distribute.cluster_resolver.TPUClusterResolver()
    tf.tpu.experimental.initialize_tpu_system(resolver)
    tpu_time = train_model(tf.distribute.TPUStrategy(resolver), X, y)
    print(f"Training time on TPU: {tpu_time:.2f} seconds")
except ValueError:
    print("No TPU found. Skipping TPU test.")
